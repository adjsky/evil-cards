
###################################################################
# Stage 1: Prune monorepo                                         #
###################################################################

FROM node:18.16.0-alpine AS prune

RUN apk add --no-cache libc6-compat
RUN yarn global add turbo@^1.8.8

WORKDIR /evil-cards
COPY . .

RUN turbo prune --scope=@evil-cards/load-balancer --docker

###################################################################
# Stage 2: Install production load-balancer dependencies          #
###################################################################

FROM node:18.16.0-alpine AS deps-prod

RUN apk add --no-cache libc6-compat
RUN corepack enable

WORKDIR /evil-cards

COPY --from=prune /evil-cards/out/json/ .
COPY --from=prune /evil-cards/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=prune /evil-cards/out/pnpm-workspace.yaml ./pnpm-workspace.yaml

RUN pnpm --frozen-lockfile -P install 

###################################################################
# Stage 3: Run load balancer (prod)                               #
###################################################################

FROM node:18.16.0-alpine AS runner-prod

RUN corepack enable

WORKDIR /evil-cards
COPY tsconfig.json .
COPY --from=deps-prod /evil-cards .
COPY --from=prune /evil-cards/out/full/ .

EXPOSE 1337
ENV PORT 1337

WORKDIR /evil-cards/apps/load-balancer

CMD ["pnpm", "start"]

###################################################################
# Stage 4: Run load balancer (dev)                                #
###################################################################

FROM node:18.16.0-alpine AS runner-dev

RUN corepack enable

WORKDIR /evil-cards
COPY . .

RUN pnpm --frozen-lockfile install

EXPOSE 1337
ENV PORT 1337

CMD ["pnpm", "dev:load-balancer"]