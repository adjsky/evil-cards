name: evil-cards-prod

services:
  mail:
    image: bytemark/smtp
    restart: always

  postgres:
    image: postgres:14-alpine
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - ../envs/postgres.env

  clickhouse:
    image: clickhouse/clickhouse-server:22.6-alpine
    restart: always
    volumes:
      - event-data:/var/lib/clickhouse
      - ../clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro
      - ../clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  plausible:
    image: plausible/analytics:v1
    restart: always
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh db init-admin && /entrypoint.sh run"
    depends_on:
      - postgres
      - clickhouse
      - mail
    env_file:
      - ../envs/plausible.env
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-nv",
          "-t=1",
          "--spider",
          "http://127.0.0.1:8001/api/health"
        ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s

  keydb:
    extends:
      file: docker-compose.common.yml
      service: keydb

  loki:
    image: grafana/loki:2.8.0
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - loki-data:/loki
      - ../loki/config.yaml:/etc/loki/config.yaml
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-nv",
          "-t=1",
          "--spider",
          "http://127.0.0.1:3100/ready"
        ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s

  server:
    extends:
      file: docker-compose.common.yml
      service: server
    image: ghcr.io/adjsky/evil-cards/server-prod:${VERSION}
    deploy:
      replicas: 2
    depends_on:
      keydb:
        condition: service_healthy
      loki:
        condition: service_healthy
    labels:
      - prometheus-job=server
      - balancer-target=evil-cards-prod-server

  load-balancer:
    extends:
      file: docker-compose.common.yml
      service: load-balancer
    image: ghcr.io/adjsky/evil-cards/load-balancer-prod:${VERSION}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      keydb:
        condition: service_healthy
      server:
        condition: service_started
      loki:
        condition: service_healthy
    labels:
      - prometheus-job=load-balancer

  prometheus:
    image: prom/prometheus:v2.44.0
    restart: always
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - prometheus-data:/prometheus
      - ../prometheus/config.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - server
      - load-balancer

  grafana:
    image: grafana/grafana-enterprise:9.5.3
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki

  client:
    extends:
      file: docker-compose.common.yml
      service: client
    image: ghcr.io/adjsky/evil-cards/client-prod:${VERSION}
    depends_on:
      plausible:
        condition: service_healthy

volumes:
  db-data:
    driver: local
  event-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  prometheus-data:
    driver: local
